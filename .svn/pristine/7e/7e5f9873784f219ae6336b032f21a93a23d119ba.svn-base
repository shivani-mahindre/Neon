package com.generic;

import io.appium.java_client.AppiumDriver;
import io.appium.java_client.android.AndroidDriver;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Properties;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;

/**
 * @ScriptName : BaseTest
 * @Description : This class will load all test data, load all objects,
 *              initialize web driver, start reports. Contains generic
 *              functionalities like open browser, login/logout
 * @author : Automation Tester (SQS)
 */
public class BaseTest extends Pojo
{
    // Local Variables
    public String userNAME;
    private WebDriver webDriver;
    private AppiumDriver<?> appiumDriver;
    private Properties objConfig;
    private WebDriverWait webDriverWait;
    private WebDriverWait appiumDriverWait;
    private Utilities objUtilities;
    private WrapperFunctions objWrapperFunctions;
    private CustomReporter objCustomReporter;
    private String testDataFilePath = "";
    private String callingClassName = "",url="";
    public List<Hashtable<String, String>> hashtableList = new ArrayList<Hashtable<String, String>>();
    private AndroidDriver<?> androidDriver;
    private InitializeTearDownEnvironment objInitializeTearDownEnvironment;

    /**
     * @Method : initializeWebEnvironment
     * @Description : This method initialize web driver for web application by
     *              opening the browser and URL specified in config.properties
     *              file
     * @author Automation Tester (SQS)
     */
    
    public void initializeWebEnvironment(String brand) 
    {
	this.loadConfigProperties();
	callingClassName = this.getClass().getName();
	this.setRunningScriptName(callingClassName);
	String user ="",pass="";
	if(brand.equals("MB"))
	{	
		user=objConfig.getProperty("web.username_mb");
		this.setUser(user);
		pass=objConfig.getProperty("web.password_mb");
		this.setPass(pass);
	}
	else
	{
		 user=objConfig.getProperty("web.username");
		 this.setUser(user);
		 pass=objConfig.getProperty("web.password");
		 this.setPass(pass);
	}
	
	this.setRunningScriptName(callingClassName);
	System.out.println("ScriptName : " + callingClassName);

	objInitializeTearDownEnvironment = new InitializeTearDownEnvironment();
	webDriver = objInitializeTearDownEnvironment.initializeWebEnvironment(objConfig);

	this.setDriver(webDriver);

	webDriverWait = new WebDriverWait(webDriver, Integer.parseInt(objConfig.getProperty("driver.WebDriverWait")));
	this.setWebDriverWait(webDriverWait);

	objCustomReporter = new CustomReporter();
	if (objConfig.getProperty("test.custom.reporter").equalsIgnoreCase("true"))
	    this.startCustomReports();

	objUtilities = new Utilities(this);
	this.setObjUtilities(objUtilities);

	objWrapperFunctions = new WrapperFunctions(this);
	this.setObjWrapperFunctions(objWrapperFunctions);

	// Open url
	/*
	 * webDriver.get(objConfig.getProperty("web.Url"));
	 * 
	 * if(objWrapperFunctions.checkElementDisplyed(By.xpath(
	 * "//a[@id='acceptCookie']"))) {
	 * objWrapperFunctions.click(By.xpath("//a[@id='acceptCookie']")); }
	 * 
	 * if() { System.out.println("admin site"); }
	 */
	String environment = objConfig.getProperty("web.Environment");
	switch (brand) {
	case "MB":
	    switch (environment) {
	    case "NP01":
		webDriver.get("https://np01-bede.meccabingo.com/");
		webDriver.findElement(By.xpath("//a[contains(text(),'Go to site')]")).click();
		
		objConfig.setProperty("web.Url","https://np01-bede.meccabingo.com/");
		break;
	    case "LIVE":
		webDriver.get("https://www.meccabingo.com/");
		webDriver.findElement(By.xpath("//a[contains(text(),'Go to site')]")).click();
		objConfig.setProperty("web.Url","https://www.meccabingo.com/");
		break;
	    default:
		break;
	    }

	    break;
	case "GC":
	    switch (environment) {
	    case "NP01":
		webDriver.get("https://np01-grosvenorcasinos.rank.bedegaming.net/");
		webDriver.findElement(By.xpath("//a[@id='acceptCookie']")).click();
		
		objConfig.setProperty("web.Url","https://np01-grosvenorcasinos.rank.bedegaming.net/");
		break;
	    case "LIVE":
		webDriver.get("https://www.grosvenorcasinos.com/");
		webDriver.findElement(By.xpath("//a[@id='acceptCookie']")).click();
		
		objConfig.setProperty("web.Url","https://www.grosvenorcasinos.com/");
		break;
	    default:
		break;
	    }

	    break;
	case "PAM":
	    switch (environment) {
	    case "NP01":
		webDriver.get("https://np01-admin.rank.bedegaming.net/Users/Account/AccessDenied?ReturnUrl=%2F");
		webDriver.findElement(By.xpath("//input[@id='usernameEmail']")).sendKeys("SQS_RDeote");
		webDriver.findElement(By.xpath("//input[@id='password']")).sendKeys("C3rg7EDi");
		webDriver.findElement(By.xpath("//button[@id='loginSubmit']")).click();
		
		objConfig.setProperty("web.Url","https://np01-admin.rank.bedegaming.net");
		break;
	    case "LIVE":
		webDriver
			.get("https://pr01-admin.rank.bedegaming.net/Users/Account/AccessDenied?ReturnUrl=%2FPlayer%2Fmeccabingo.com%2F677416524176302142");
		
		objConfig.setProperty("web.Url","https://pr01-admin.rank.bedegaming.net/Users/Account/AccessDenied?ReturnUrl=%2FPlayer%2Fmeccabingo.com%2F677416524176302142");
		break;
	    default:
		break;
	    }

	    break;

	default:
	    break;
	}

    }



    /* * @Method : initializeWebEnvironment
     * @Description : This method initialize web driver for web application by
     *              opening the browser and URL specified in config.properties
     *              file
     * @author : Automation Tester (SQS)
    */
    public void initializePAMEnvironment(String brand)
    {
    	this.loadConfigProperties();
    	String user="";
    	if(brand.equals("MB"))
    	{	
    		user=objConfig.getProperty("web.username_mb");
    	 this.setUser(user);
    	
    	}
    	else
    	{
    		user=objConfig.getProperty("web.username");
    		 this.setUser(user);
    	
    	}
    	
    	String PAMUser = objConfig.getProperty("web.PAMUsername"); // setting GC User
    	this.setPAMUser(PAMUser);
    	
    	String PAMPassword = objConfig.getProperty("web.PAMPassword");
    	this.setPAMPassword(PAMPassword);
    	
    	callingClassName = this.getClass().getName();
    	this.setRunningScriptName(callingClassName);
    	System.out.println("ScriptName : " + callingClassName);

    	objInitializeTearDownEnvironment = new InitializeTearDownEnvironment();
    	webDriver = objInitializeTearDownEnvironment.initializeWebEnvironment(objConfig);

    	this.setDriver(webDriver);
    	webDriverWait = new WebDriverWait(webDriver, Integer.parseInt(objConfig.getProperty("driver.WebDriverWait")));
    	this.setWebDriverWait(webDriverWait);

    	objCustomReporter = new CustomReporter();
    	if (objConfig.getProperty("test.custom.reporter").equalsIgnoreCase("true"))
    	    this.startCustomReports();

    	objUtilities = new Utilities(this);
    	this.setObjUtilities(objUtilities);

    	objWrapperFunctions = new WrapperFunctions(this);
    	this.setObjWrapperFunctions(objWrapperFunctions);

    	// Open url
    	webDriver.get(objConfig.getProperty("PAM.Url"));

    	// return user;
        }
    
    
    /**
     * @Method : tearDownEnvironment
     * @Description : quit webdriver
     * @author : Harshvardhan Yadav (SQS)
     */
    public void tearDownWebEnvironment() {
	if (objConfig.getProperty("test.custom.reporter").equalsIgnoreCase("true"))
	    objCustomReporter.endReport();
	objInitializeTearDownEnvironment.tearDownWebEnvironment(objConfig);
	objUtilities = null;
	objWrapperFunctions = null;
    }

    /**
     * @Method: initializeAndroidEnvironment
     * @Description: initialize android environment
     * @author Automation Tester (SQS)
     * @CreationDate: @ModifiedDate:
     */
    public void initializeAndroidEnvironment(String brand) {
	this.loadConfigProperties();

	callingClassName = this.getClass().getName();
	this.setRunningScriptName(callingClassName);
	String user ="",pass="";
	if(brand.equals("MB"))
	{	
		user=objConfig.getProperty("web.username_mb");
		this.setUser(user);
		pass=objConfig.getProperty("web.password_mb");
		this.setPass(pass);
	}
	else
	{
		 user=objConfig.getProperty("web.username");
		 this.setUser(user);
		 pass=objConfig.getProperty("web.password");
		 this.setPass(pass);
	}
	
	
	objInitializeTearDownEnvironment = new InitializeTearDownEnvironment();
	appiumDriver = objInitializeTearDownEnvironment.initializeAndroidEnvironment(objConfig, brand);
	this.setAppiumDriver(appiumDriver);

	appiumDriverWait = new WebDriverWait(appiumDriver, Integer.parseInt(objConfig
		.getProperty("driver.WebDriverWait")));
	this.setAppiumDriverWait(appiumDriverWait);

	objUtilities = new Utilities(this);
	this.setObjUtilities(objUtilities);

	objWrapperFunctions = new WrapperFunctions(this);
	this.setObjWrapperFunctions(objWrapperFunctions);
	this.setAndroidDriver(androidDriver);

	if (objConfig.getProperty("test.custom.reporter").equalsIgnoreCase("true"))
	    this.startCustomReports();
		
   
	
    }

    /**
     * @Method : tearDownAndroidEnvironment
     * @Description : tear down android environment
     * @author : Automation Tester (SQS)
     */
    public void tearDownAndroidEnvironment() {
	if (objConfig.getProperty("test.custom.reporter").equalsIgnoreCase("true"))
	    objCustomReporter.endReport();
	objInitializeTearDownEnvironment.tearDownAndroidEnvironment(objConfig);
	objUtilities = null;
	objWrapperFunctions = null;
    }

    /**
     * @Method: initializeIOSEnvironment
     * @Description: initialize iOS environment
     * @author : Automation Tester (SQS)
     * @CreationDate: @ModifiedDate:
     */
    public void initializeIOSEnvironment() {
	this.loadConfigProperties();

	callingClassName = this.getClass().getName();
	this.setRunningScriptName(callingClassName);

	objInitializeTearDownEnvironment = new InitializeTearDownEnvironment();
	appiumDriver = objInitializeTearDownEnvironment.initializeIOSEnvironment(objConfig);
	this.setAppiumDriver(appiumDriver);

	appiumDriverWait = new WebDriverWait(appiumDriver, Integer.parseInt(objConfig
		.getProperty("driver.WebDriverWait")));
	this.setAppiumDriverWait(appiumDriverWait);

	objUtilities = new Utilities(this);
	this.setObjUtilities(objUtilities);

	objWrapperFunctions = new WrapperFunctions(this);
	this.setObjWrapperFunctions(objWrapperFunctions);

	if (objConfig.getProperty("test.custom.reporter").equalsIgnoreCase("true"))
	    this.startCustomReports();
    }

    /**
     * @Method : tearDownIOSEnvironment
     * @Description : tear down iOS environment
     * @author : Automation Tester (SQS)
     */
    public void tearDownIOSEnvironment() {
	if (objConfig.getProperty("test.custom.reporter").equalsIgnoreCase("true"))
	    objCustomReporter.endReport();
	objInitializeTearDownEnvironment.tearDownIOSEnvironment(objConfig);
	objUtilities = null;
	objWrapperFunctions = null;
    }

    /**
     * @Method : loadTestData
     * @param : runID - test case run id
     * @param : dataSet - test data hash table
     * @Description : Load data from excel for the running testCase and return
     *              as Object array
     * @author : Automation Tester (SQS)
     */
    public void loadTestData(String runID, Hashtable<String, String> dataSet) {
	this.setRunID(runID);
	this.setDataPoolHashTable(dataSet);
	objUtilities = new Utilities(this);
	this.setObjUtilities(objUtilities);

	objWrapperFunctions = new WrapperFunctions(this);
	this.setObjWrapperFunctions(objWrapperFunctions);
    }

    /**
     * @Method : loadDataProvider
     * @param : testCaseID - test case id
     * @param : testDataFile - test data file
     * @Description : Load Data from Excel for the running testCase and return
     *              as Object array
     * @author : Automation Tester (SQS)
     */
    public Object[][] loadDataProvider(String testCaseID, String testDataFile) {
	Object[][] dataPool = null;

	if (!testDataFile.equals("") && !testCaseID.equals("")) {
	    testDataFilePath = System.getProperty("user.dir") + objConfig.getProperty("testdata.path") + "/"
		    + testDataFile + ".xlsx";
	    this.setTestCaseID(testCaseID);
	    this.setStrTestDataFilePath(testDataFilePath);

	    DataPool objDataPool = new DataPool();
	    dataPool = objDataPool.loadTestData(testCaseID, testDataFilePath);
	}
	return dataPool;
    }

    /**
     * @Method : loadConfigProperties
     * @Description : load config properties
     * @author : Automation Tester (SQS)
     */
    public void loadConfigProperties() {
	try {
	    objConfig = new Properties();
	    objConfig
		    .load(new FileInputStream(System.getProperty("user.dir") + "/src/test/resources/config.properties"));
	    this.setObjConfig(objConfig);
	} catch (Exception exception) {
	    exception.printStackTrace();
	}
    }

    /**
     * startCustomeReports - this method starts the custome report
     * 
     * @author : Automation Tester (SQS)
     */
    public void startCustomReports() {
	setCustomeReporter(objCustomReporter);
	objCustomReporter.startReport(callingClassName);
    }

    public void closeBrowser() {
	try {
	    for (String handle : webDriver.getWindowHandles()) {
		webDriver.switchTo().window(handle);
		webDriver.quit();
		System.out.println("Closing browser again");
	    }
	} catch (Exception exception) {
	    exception.printStackTrace();
	    if (objConfig.getProperty("web.browser").equalsIgnoreCase("IE")
		    || objConfig.getProperty("web.browser").equalsIgnoreCase("Chrome")
		    || objConfig.getProperty("web.browser").equalsIgnoreCase("Firefox"))
		killBrowserAndDriver();
	}
    }

    protected void killBrowserAndDriver() {
	String browser = objConfig.getProperty("web.browser").trim();
	String driverProcess = "";

	if (!browser.equals("") && browser.equalsIgnoreCase("IE")) {
	    driverProcess = "IEDriverServer.exe";
	} else if (!browser.equals("") && browser.equalsIgnoreCase("Chrome")) {
	    driverProcess = "chromedriver.exe";
	} else if (!browser.equals("") && browser.equalsIgnoreCase("Firefox")) {
	    driverProcess = "firefox.exe";
	}
	try {
	    // Process procDriver =
	    // Runtime.getRuntime().exec("taskkill /F /T /IM "+ driverProcess);
	    Process procIE = Runtime.getRuntime().exec("taskkill /im" + driverProcess);
	    // procDriver.waitFor();
	    procIE.waitFor();
	} catch (Exception exception) {
	    exception.printStackTrace();
	}
    }

    public void closeGame() {

	String parentHandle = webDriver.getWindowHandle(); // get the current
							   // window handle
	for (String winHandle : webDriver.getWindowHandles()) {
	    webDriver.switchTo().window(winHandle); // switch focus of WebDriver
						    // to the next found window
						    // handle (that's your newly
						    // opened window)
	}
	webDriver.close(); // close newly opened window when done with it
	webDriver.switchTo().window(parentHandle); // switch back to the
						   // original window
    }

    public void uploadresult(String instance_id) {
	PractiTestResult.resultUpload(instance_id);
    }
    
    
	public void initializeSecondWebEnvironment(String brand)
	{
		this.loadConfigProperties();

		callingClassName = this.getClass().getName();
		this.setRunningScriptName(callingClassName);
		String user = "";
		if (brand.equals("MB"))
		{
			objConfig.getProperty("web.username_mb");
			this.setUser(user);
		} else
		{
			objConfig.getProperty("web.username");
			this.setUser(user);
		}
		this.setRunningScriptName(callingClassName);
		System.out.println("ScriptName : " + callingClassName);

		objInitializeTearDownEnvironment = new InitializeTearDownEnvironment();
		webDriver = objInitializeTearDownEnvironment.initializeSecondWebEnvironment(objConfig);

		/*
		 * this.setDriver(webDriver);
		 * 
		 * webDriverWait = new WebDriverWait(webDriver,
		 * Integer.parseInt(objConfig.getProperty("driver.WebDriverWait")));
		 * this.setWebDriverWait(webDriverWait);
		 * 
		 * objCustomReporter = new CustomReporter(); if
		 * (objConfig.getProperty("test.custom.reporter"
		 * ).equalsIgnoreCase("true")) this.startCustomReports();
		 * 
		 * objUtilities = new Utilities(this);
		 * this.setObjUtilities(objUtilities);
		 * 
		 * objWrapperFunctions = new WrapperFunctions(this);
		 * this.setObjWrapperFunctions(objWrapperFunctions);
		 */

		// Open url
		/*
		 * webDriver.get(objConfig.getProperty("web.Url"));
		 * 
		 * if(objWrapperFunctions.checkElementDisplyed(By.xpath(
		 * "//a[@id='acceptCookie']"))) {
		 * objWrapperFunctions.click(By.xpath("//a[@id='acceptCookie']")); }
		 * 
		 * if() { System.out.println("admin site"); }
		 */

	}
   
    
    
    
}